syntax = "proto2";

import "google/protobuf/empty.proto";

// Interface exported by the server.
// See https://github.com/laike9m/Cyberbrain/issues/55 for details.
service Communication {

  rpc SendFrame(Frame) returns (google.protobuf.Empty) {}

  // This API will be implemented in V2.
  // rpc GetTargetFrame(FrameLocaterList) returns (FrameLocater) {}
}

// Information to help locate a frame.
message FrameLocater {
  // This field is required.
  optional string frame_id = 1;

  // Ideally be qualified name, at least use callable's name.
  optional string frame_name = 2;

  // Filename where the frame is located at.
  optional string filename = 3;

  // Start line of the frame in filename.
  optional int64 start_lineno = 4;

  // End line of the frame in filename.
  optional int64 end_lineno = 5;

  // The file from which the frame is entered.
  optional string callsite_filename = 6;

  // The line where the callable that generates the frame is called.
  optional int64 callsite_lineno = 7;

  // Arguments stringified. f(1, b=2) -> "1, b=2"
  optional string arguments = 8;
}

message FrameLocaterList {
  repeated FrameLocater frame_locaters = 1;
}

// These four message types correspond to the types defined in cyberbrain/basis.py
// Next ID: 9
message InitialValue {
  optional string id = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  optional int64 index = 6;
  optional int32 offset = 7;
  optional string target = 4;
  // A JSON string representing a Python object.
  optional string value = 5;
  optional string repr = 8;
}

// Next ID: 10
message Binding {
  optional string id = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  optional string target = 4;
  optional int64 index = 7;
  optional int32 offset = 8;
  optional string value = 5;
  optional string repr = 9;
  repeated string sources = 6;
}

// Next ID: 11
message Mutation {
  optional string id = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  optional int64 index = 8;
  optional int32 offset = 9;
  optional string target = 4;
  optional string value = 5;
  optional string repr = 10;
  // A list of identifiers that caused the mutation.
  repeated string sources = 7;
}

// Next ID: 7
message Deletion {
  optional string id = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  optional int64 index = 5;
  optional int32 offset = 6;
  optional string target = 4;
}

// Next ID: 9
message Return {
  optional string id = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  optional int64 index = 4;
  optional int32 offset = 5;
  optional string value = 6;
  optional string repr = 8;
  repeated string sources = 7;
}

message JumpBackToLoopStart {
  optional string id = 1;
  optional string filename = 2;
  optional int32 lineno = 3;
  optional int64 index = 4;
  optional int32 offset = 5;
  optional int32 jump_target = 6;
}

message Event {
  oneof value {
    InitialValue initial_value = 1;
    Binding binding = 2;
    Mutation mutation = 3;
    Deletion deletion = 4;
    Return return = 5;
    JumpBackToLoopStart jump_back_to_loop_start = 6;
  }
}

message EventIDList {
  repeated string event_ids = 1;
}

message Loop {
  optional int32 start_offset = 1;
  optional int32 end_offset = 2;
  optional int32 start_lineno = 3;
}

message Frame {
  optional FrameLocater metadata = 1;

  // Events that happened in this frame, arranged by the order they occurred.
  repeated Event events = 2;

  repeated Loop loops = 3;

  // Maps events to relevant predecessor events.
  map</* event id */ string, EventIDList> tracing_result = 4;

  // Identifiers appeared in this frame. Used to initialize trace graph's color schema.
  repeated string identifiers = 5;
}
